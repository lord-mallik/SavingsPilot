import React, { useState } from 'react';
import { Download, Share2, FileText, Image, Mail, Printer } from 'lucide-react';
import { motion } from 'framer-motion';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { 
  FacebookShareButton, 
  TwitterShareButton, 
  LinkedinShareButton,
  WhatsappShareButton,
  FacebookIcon,
  TwitterIcon,
  LinkedinIcon,
  WhatsappIcon
} from 'react-share';
import { UserProfile, FinancialData } from '../types';
import { formatINR } from '../utils/currency';
import { useTheme } from '../contexts/ThemeContext';
import { useTranslation } from 'react-i18next';
import toast from 'react-hot-toast';

interface ExportReportsProps {
  userProfile: UserProfile;
  financialData: FinancialData;
}

export const ExportReports: React.FC<ExportReportsProps> = ({
  userProfile,
  financialData,
}) => {
  const { theme } = useTheme();
  const { t } = useTranslation();
  const [isGenerating, setIsGenerating] = useState(false);
  const [reportType, setReportType] = useState<'summary' | 'detailed' | 'insights'>('summary');

  const generatePDFReport = async () => {
    setIsGenerating(true);
    
    try {
      const pdf = new jsPDF('p', 'mm', 'a4');
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      
      // Header
      pdf.setFontSize(24);
      pdf.setTextColor(theme === 'dark' ? 255 : 0);
      pdf.text('SavingsPilot Financial Report', pageWidth / 2, 30, { align: 'center' });
      
      // User Info
      pdf.setFontSize(16);
      pdf.text(`Name: ${userProfile.name}`, 20, 50);
      pdf.text(`Level: ${userProfile.level}`, 20, 60);
      pdf.text(`Generated: ${new Date().toLocaleDateString('en-IN')}`, 20, 70);
      
      // Financial Summary
      pdf.setFontSize(18);
      pdf.text('Financial Summary', 20, 90);
      
      const totalExpenses = financialData.expenses.reduce((sum, exp) => sum + exp.amount, 0);
      const netSavings = financialData.monthlyIncome - totalExpenses;
      
      pdf.setFontSize(12);
      pdf.text(`Monthly Income: ${formatINR(financialData.monthlyIncome)}`, 20, 110);
      pdf.text(`Total Expenses: ${formatINR(totalExpenses)}`, 20, 120);
      pdf.text(`Net Savings: ${formatINR(netSavings)}`, 20, 130);
      pdf.text(`Emergency Fund: ${formatINR(financialData.emergencyFund)}`, 20, 140);
      
      // Expense Breakdown
      pdf.setFontSize(18);
      pdf.text('Expense Breakdown', 20, 160);
      
      let yPosition = 180;
      financialData.expenses.forEach((expense, index) => {
        if (yPosition > pageHeight - 30) {
          pdf.addPage();
          yPosition = 30;
        }
        
        pdf.setFontSize(10);
        pdf.text(
          `${expense.category}: ${formatINR(expense.amount)} (${expense.type})`,
          20,
          yPosition
        );
        yPosition += 10;
      });
      
      // Achievements
      if (userProfile.badges.length > 0) {
        if (yPosition > pageHeight - 60) {
          pdf.addPage();
          yPosition = 30;
        }
        
        pdf.setFontSize(18);
        pdf.text('Achievements', 20, yPosition);
        yPosition += 20;
        
        userProfile.badges.slice(0, 5).forEach((badge) => {
          pdf.setFontSize(10);
          pdf.text(`${badge.name}: ${badge.description}`, 20, yPosition);
          yPosition += 10;
        });
      }
      
      // Footer
      pdf.setFontSize(8);
      pdf.setTextColor(128);
      pdf.text(
        'Generated by SavingsPilot - Your Financial Success Partner',
        pageWidth / 2,
        pageHeight - 10,
        { align: 'center' }
      );
      
      pdf.save(`savingspilot-report-${new Date().toISOString().split('T')[0]}.pdf`);
      toast.success('PDF report generated successfully!');
      
    } catch (error) {
      console.error('Error generating PDF:', error);
      toast.error('Failed to generate PDF report. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };

  const generateImageReport = async () => {
    setIsGenerating(true);
    
    try {
      // Create a temporary div with report content
      const reportElement = document.createElement('div');
      reportElement.style.cssText = `
        width: 800px;
        padding: 40px;
        background: ${theme === 'dark' ? '#1F2937' : '#FFFFFF'};
        color: ${theme === 'dark' ? '#F9FAFB' : '#111827'};
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        position: absolute;
        left: -9999px;
        top: 0;
      `;
      
      const totalExpenses = financialData.expenses.reduce((sum, exp) => sum + exp.amount, 0);
      const netSavings = financialData.monthlyIncome - totalExpenses;
      
      reportElement.innerHTML = `
        <div style="text-align: center; margin-bottom: 40px;">
          <h1 style="font-size: 32px; margin-bottom: 10px; color: #3B82F6;">SavingsPilot Report</h1>
          <h2 style="font-size: 24px; margin-bottom: 20px;">${userProfile.name}</h2>
          <p style="color: #6B7280;">Level ${userProfile.level} â€¢ ${new Date().toLocaleDateString('en-IN')}</p>
        </div>
        
        <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 20px; margin-bottom: 30px;">
          <div style="text-align: center; padding: 20px; background: ${theme === 'dark' ? '#374151' : '#F3F4F6'}; border-radius: 12px;">
            <h3 style="font-size: 18px; margin-bottom: 10px;">Monthly Income</h3>
            <p style="font-size: 28px; font-weight: bold; color: #10B981;">${formatINR(financialData.monthlyIncome)}</p>
          </div>
          <div style="text-align: center; padding: 20px; background: ${theme === 'dark' ? '#374151' : '#F3F4F6'}; border-radius: 12px;">
            <h3 style="font-size: 18px; margin-bottom: 10px;">Net Savings</h3>
            <p style="font-size: 28px; font-weight: bold; color: ${netSavings >= 0 ? '#10B981' : '#EF4444'};">${formatINR(netSavings)}</p>
          </div>
        </div>
        
        <div style="margin-bottom: 30px;">
          <h3 style="font-size: 20px; margin-bottom: 15px;">Achievements</h3>
          <div style="display: flex; gap: 15px; flex-wrap: wrap;">
            ${userProfile.badges.slice(0, 6).map(badge => `
              <div style="text-align: center; padding: 15px; background: ${theme === 'dark' ? '#374151' : '#FEF3C7'}; border-radius: 8px; min-width: 100px;">
                <div style="font-size: 24px; margin-bottom: 5px;">${badge.icon}</div>
                <p style="font-size: 12px; font-weight: bold;">${badge.name}</p>
              </div>
            `).join('')}
          </div>
        </div>
        
        <div style="text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid ${theme === 'dark' ? '#374151' : '#E5E7EB'};">
          <p style="font-size: 12px; color: #6B7280;">Generated by SavingsPilot â€¢ savingspilot.com</p>
        </div>
      `;
      
      document.body.appendChild(reportElement);
      
      const canvas = await html2canvas(reportElement, {
        scale: 2,
        useCORS: true,
        backgroundColor: theme === 'dark' ? '#1F2937' : '#FFFFFF'
      });
      
      document.body.removeChild(reportElement);
      
      const link = document.createElement('a');
      link.download = `savingspilot-report-${new Date().toISOString().split('T')[0]}.png`;
      link.href = canvas.toDataURL();
      link.click();
      
      toast.success('Image report generated successfully!');
      
    } catch (error) {
      console.error('Error generating image:', error);
      toast.error('Failed to generate image report. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };

  const shareContent = {
    title: `My SavingsPilot Financial Journey - Level ${userProfile.level}`,
    text: `I've reached Level ${userProfile.level} and saved ${formatINR(userProfile.totalSaved)} with SavingsPilot! ðŸŽ¯ Join me on the path to financial freedom! #FinancialLiteracy #SavingsPilot #MoneyManagement`,
    url: 'https://savingspilot.com'
  };

  const reportTypes = [
    { id: 'summary', name: 'Summary Report', description: 'Key metrics and achievements' },
    { id: 'detailed', name: 'Detailed Report', description: 'Complete financial breakdown' },
    { id: 'insights', name: 'Insights Report', description: 'AI-powered recommendations' }
  ];

  return (
    <div className={`rounded-xl shadow-lg p-6 transition-colors duration-300 ${
      theme === 'dark' ? 'bg-gray-800' : 'bg-white'
    }`}>
      <div className="flex items-center gap-3 mb-6">
        <Share2 className="w-8 h-8 text-blue-600" />
        <h2 className={`text-2xl font-bold ${
          theme === 'dark' ? 'text-white' : 'text-gray-800'
        }`}>
          Export & Share Reports
        </h2>
      </div>

      {/* Report Type Selection */}
      <div className="mb-6">
        <h3 className={`text-lg font-semibold mb-3 ${
          theme === 'dark' ? 'text-white' : 'text-gray-800'
        }`}>
          Report Type
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
          {reportTypes.map((type) => (
            <button
              key={type.id}
              onClick={() => setReportType(type.id as any)}
              className={`p-4 rounded-lg border-2 transition-all text-left ${
                reportType === type.id
                  ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                  : theme === 'dark'
                    ? 'border-gray-600 bg-gray-700 hover:border-gray-500'
                    : 'border-gray-200 bg-gray-50 hover:border-gray-300'
              }`}
            >
              <h4 className={`font-medium mb-1 ${
                theme === 'dark' ? 'text-white' : 'text-gray-800'
              }`}>
                {type.name}
              </h4>
              <p className={`text-sm ${
                theme === 'dark' ? 'text-gray-400' : 'text-gray-600'
              }`}>
                {type.description}
              </p>
            </button>
          ))}
        </div>
      </div>

      {/* Export Options */}
      <div className="mb-6">
        <h3 className={`text-lg font-semibold mb-3 ${
          theme === 'dark' ? 'text-white' : 'text-gray-800'
        }`}>
          Export Options
        </h3>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
          <motion.button
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            onClick={generatePDFReport}
            disabled={isGenerating}
            className="flex flex-col items-center gap-2 p-4 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:opacity-50 transition-colors"
          >
            <FileText className="w-6 h-6" />
            <span className="text-sm font-medium">PDF Report</span>
          </motion.button>

          <motion.button
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            onClick={generateImageReport}
            disabled={isGenerating}
            className="flex flex-col items-center gap-2 p-4 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 transition-colors"
          >
            <Image className="w-6 h-6" />
            <span className="text-sm font-medium">PNG Image</span>
          </motion.button>

          <button
            onClick={() => {
              const csvContent = [
                ['Category', 'Amount', 'Type', 'Description'],
                ...financialData.expenses.map(exp => [
                  exp.category,
                  exp.amount.toString(),
                  exp.type,
                  exp.description || ''
                ])
              ].map(row => row.join(',')).join('\n');
              
              const blob = new Blob([csvContent], { type: 'text/csv' });
              const url = URL.createObjectURL(blob);
              const link = document.createElement('a');
              link.href = url;
              link.download = `savingspilot-expenses-${new Date().toISOString().split('T')[0]}.csv`;
              link.click();
              URL.revokeObjectURL(url);
              
              toast.success('CSV exported successfully!');
            }}
            className="flex flex-col items-center gap-2 p-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            <Download className="w-6 h-6" />
            <span className="text-sm font-medium">CSV Data</span>
          </button>

          <button
            onClick={() => {
              if (navigator.share) {
                navigator.share(shareContent);
              } else {
                navigator.clipboard.writeText(`${shareContent.text} ${shareContent.url}`);
                toast.success('Content copied to clipboard!');
              }
            }}
            className="flex flex-col items-center gap-2 p-4 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
          >
            <Share2 className="w-6 h-6" />
            <span className="text-sm font-medium">Quick Share</span>
          </button>
        </div>
      </div>

      {/* Social Media Sharing */}
      <div className="mb-6">
        <h3 className={`text-lg font-semibold mb-3 ${
          theme === 'dark' ? 'text-white' : 'text-gray-800'
        }`}>
          Share on Social Media
        </h3>
        <div className="flex gap-3 flex-wrap">
          <TwitterShareButton
            url={shareContent.url}
            title={shareContent.text}
            className="hover:scale-105 transition-transform"
          >
            <TwitterIcon size={40} round />
          </TwitterShareButton>

          <FacebookShareButton
            url={shareContent.url}
            quote={shareContent.text}
            className="hover:scale-105 transition-transform"
          >
            <FacebookIcon size={40} round />
          </FacebookShareButton>

          <LinkedinShareButton
            url={shareContent.url}
            title={shareContent.title}
            summary={shareContent.text}
            className="hover:scale-105 transition-transform"
          >
            <LinkedinIcon size={40} round />
          </LinkedinShareButton>

          <WhatsappShareButton
            url={shareContent.url}
            title={shareContent.text}
            className="hover:scale-105 transition-transform"
          >
            <WhatsappIcon size={40} round />
          </WhatsappShareButton>
        </div>
      </div>

      {/* Email Report */}
      <div className={`p-4 rounded-lg ${
        theme === 'dark' ? 'bg-gray-700' : 'bg-gray-50'
      }`}>
        <h3 className={`text-lg font-semibold mb-3 ${
          theme === 'dark' ? 'text-white' : 'text-gray-800'
        }`}>
          Email Report
        </h3>
        <div className="flex gap-3">
          <input
            type="email"
            placeholder="Enter email address"
            className={`flex-1 px-3 py-2 border rounded-lg transition-colors ${
              theme === 'dark'
                ? 'bg-gray-600 border-gray-500 text-white placeholder-gray-400'
                : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500'
            } focus:ring-2 focus:ring-blue-500 focus:border-transparent`}
          />
          <button
            onClick={() => {
              // Mock email functionality
              toast.success('Report will be sent to your email shortly!');
            }}
            className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            <Mail className="w-4 h-4" />
            Send
          </button>
        </div>
      </div>

      {/* Loading Overlay */}
      {isGenerating && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className={`p-6 rounded-lg ${
            theme === 'dark' ? 'bg-gray-800' : 'bg-white'
          }`}>
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
              <span className={`font-medium ${
                theme === 'dark' ? 'text-white' : 'text-gray-800'
              }`}>
                Generating your report...
              </span>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};